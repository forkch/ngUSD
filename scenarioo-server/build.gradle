/* scenarioo-server
 * Copyright (C) 2014, scenarioo.org Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

group = 'org.scenarioo'

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply from: "${rootProject.projectDir}/java.gradle"

dependencies {
    compile 'org.jboss.resteasy:resteasy-jaxrs:3.1.4.Final'
    compile 'org.jboss.resteasy:resteasy-jaxb-provider:3.1.4.Final'
    compile 'org.jboss.resteasy:resteasy-jackson-provider:3.1.4.Final'
    compile 'org.jboss.resteasy:resteasy-multipart-provider:3.1.4.Final'
    compile 'com.google.guava:guava-base:r03'
    compile 'org.apache.xmlgraphics:batik-transcoder:1.8'
    compile 'org.apache.xmlgraphics:batik-codec:1.8'
    compile 'org.apache.xmlgraphics:xmlgraphics-commons:1.5'
    compile 'com.thetransactioncompany:cors-filter:2.5'
    compile 'org.mockito:mockito-all:1.9.5'
    compile 'org.elasticsearch:elasticsearch:5.6.9'
    compile 'org.elasticsearch.client:transport:5.6.9'
    providedCompile 'javax.servlet:servlet-api:2.5'
}

eclipse {
  wtp {
    component {
      contextPath = 'scenarioo'
      deployName = 'scenarioo'
    }
  }
}

task printPathConfigInformationForNodeJSAndGrunt << {
	if (project.hasProperty('pathToNodeJS')) {
        println "Path to Node JS was configued as: " + pathToNodeJS
    } else {
    	println "Path to Node JS not specified, set property 'pathToNodeJS' in case the PATH variable is not set properly or not propagated to the client's build script."
    }
    if (project.hasProperty('installGrunt')) {
        println "installGrunt is specified, this will trigger installation of grunt in client build: " + installGrunt + " (this value should be 'installGrunt')"
    } else {
        println "installGrunt: property is undefined, this means grunt is assumed to be installed already."
    }
}

task createVersionPropertiesFile << {
	def aggregatedDataFormatVersion = project.scenariooAggregatedDataFormatVersion
	def apiVersion = project.scenariooApiVersion
    def releaseBranch = project.scenariooReleaseBranch

	File versionFile = new File(sourceSets.main.output.classesDir.getAbsolutePath() + '/version.properties');
	versionFile.write('version=' + versionWithGitCommit + '\n' +
            'build-date=' + new Date() + '\n' +
            'apiVersion=' + apiVersion + '\n' +
            'aggregatedDataFormatVersion=' + aggregatedDataFormatVersion + '\n' +
            'releaseBranch=' + releaseBranch + '\n')
}

war {
    from '../scenarioo-client/dist'
    from(sourceSets.main.output.classesDir) {
        into('WEB-INF/classes')
    }
	archiveName 'scenarioo-viewer-' + version + '.war'
}

war.doLast {
    copy {
        from ('build/libs/')
        into ('build/libs/')
        include('scenarioo-viewer-' + version + '.war')
        rename('scenarioo-viewer-' + version + '.war', 'scenarioo-latest.war')
    }
}

war.dependsOn createVersionPropertiesFile
war.dependsOn ":scenarioo-client:build"

if(ossrhPassword) {
    signing {
        sign configurations.archives
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Scenarioo Viewer'
                packaging 'war'
                description 'Scenarioo Viewer for automated Documentation using UI-E2E-Tests http://scenarioo.org'
                url 'http://www.scenarioo.org'

                scm {
                    connection 'https://github.com/scenarioo/scenarioo.git'
                    developerConnection 'https://github.com/scenarioo/scenarioo.git'
                    url 'https://github.com/scenarioo/scenarioo.git'
                }

                licenses {
                    license {
                        name 'GNU GENERAL PUBLIC LICENSE'
                        url 'https://github.com/scenarioo/scenarioo/blob/develop/LICENSE.txt'
                    }
                }

                developers {
                    developer {
                        id 'scenarioo'
                        name 'Scenarioo'
                        email 'contact@scenarioo.org'
                    }
                }
            }
        }
    }
}
