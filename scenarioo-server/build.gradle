/* scenarioo-server
 * Copyright (C) 2014, scenarioo.org Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

group = 'org.scenarioo'

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply from: "${rootProject.projectDir}/build-java.gradle"
apply plugin: 'org.springframework.boot'
apply plugin: 'cz.habarta.typescript-generator'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.13.489'
    }
}
generateTypeScript {
    classes = [
            'org.scenarioo.model.configuration.Configuration',
            'org.scenarioo.rest.configuration.ApplicationStatus',
            'org.scenarioo.model.configuration.BranchAlias',
            'org.scenarioo.rest.configuration.FlatLabelConfiguration',
            'org.scenarioo.dao.version.ApplicationVersion',
            'org.scenarioo.model.docu.aggregates.branches.BuildImportSummary',
            'org.scenarioo.model.diffViewer.BuildDiffInfo',
            'org.scenarioo.model.diffViewer.ScenarioDiffInfo',
            'org.scenarioo.model.diffViewer.StepDiffInfo',
            'org.scenarioo.model.diffViewer.UseCaseDiffInfo',
            'org.scenarioo.model.docu.aggregates.objects.CustomObjectTabTree',
            'org.scenarioo.model.docu.entities.generic.ObjectDescription',
            'org.scenarioo.model.docu.aggregates.objects.ObjectIndex',
            'org.scenarioo.rest.objectRepository.StepReference',
            'org.scenarioo.model.docu.aggregates.usecases.UseCaseScenarios',
            'org.scenarioo.rest.scenario.dto.ScenarioDetails',
            'org.scenarioo.rest.search.SearchResponse',
            'org.scenarioo.rest.search.SearchEngineStatus',
            'org.scenarioo.model.docu.aggregates.usecases.UseCaseSummary',
            'org.scenarioo.model.docu.aggregates.branches.BranchBuilds',
            'org.scenarioo.rest.sketcher.issue.dto.SketchIds',
    ]

    addTypeNamePrefix = 'I'
    noFileComment = true
    outputFile = '../scenarioo-client/app/generated-types/backend-types.ts'
    outputFileType = 'implementationFile'
    outputKind = 'module'
    jsonLibrary = 'jackson2'

}

dependencies {

    implementation 'org.apache.xmlgraphics:batik-transcoder'
    implementation 'org.apache.xmlgraphics:batik-codec'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons'
    implementation 'com.thetransactioncompany:cors-filter'
    implementation 'org.elasticsearch:elasticsearch'
    implementation 'org.elasticsearch.client:transport'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'io.springfox:springfox-swagger2'
    implementation 'io.springfox:springfox-swagger-ui'

    //These libraries are no longer provided in Java 9+, thus we need to add them manually
    implementation 'javax.xml.bind:jaxb-api'
    implementation 'com.sun.xml.bind:jaxb-core'
    implementation 'com.sun.xml.bind:jaxb-impl'
    implementation 'javax.activation:activation'

    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

eclipse {
  wtp {
    component {
      contextPath = 'scenarioo'
      deployName = 'scenarioo'
    }
  }
}

task createVersionPropertiesFile {
	doLast {
		def aggregatedDataFormatVersion = project.scenariooAggregatedDataFormatVersion
		def apiVersion = project.scenariooApiVersion
		def documentationVersion = project.documentationVersion

		File versionFile = new File(sourceSets.main.output.classesDirs.getSingleFile().absolutePath + '/version.properties');
		versionFile.write('version=' + versionWithGitCommit + '\n' +
				'build-date=' + new Date() + '\n' +
				'apiVersion=' + apiVersion + '\n' +
				'aggregatedDataFormatVersion=' + aggregatedDataFormatVersion + '\n' +
				'documentationVersion=' + documentationVersion + '\n')
	}
}

bootJar {
    from('../scenarioo-client/dist') {
        into('static')
    }
    archiveFileName = 'scenarioo-viewer-' + version + '.jar'
}

bootJar.doLast {
    copy {
        from ('build/libs/')
        into ('build/libs/')
        include('scenarioo-viewer-' + version + '.jar')
        rename('scenarioo-viewer-' + version + '.jar', 'scenarioo-latest.jar')
    }
}

bootWar {
    from('../scenarioo-client/dist') {
        into('WEB-INF/classes/static')
    }
    archiveFileName = 'scenarioo-viewer-' + version + '.war'
}

bootWar.doLast {
    copy {
        from ('build/libs/')
        into ('build/libs/')
        include('scenarioo-viewer-' + version + '.war')
        rename('scenarioo-viewer-' + version + '.war', 'scenarioo-latest.war')
    }
}

assemble.dependsOn createVersionPropertiesFile
war.dependsOn createVersionPropertiesFile
bootWar.dependsOn ":scenarioo-client:build"
war.dependsOn ":scenarioo-client:build"

if(ossrhPassword) {
    signing {
        sign configurations.archives
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Scenarioo Viewer'
                packaging 'war'
                description 'Scenarioo Viewer for automated Documentation using UI-E2E-Tests http://scenarioo.org'
                url 'http://www.scenarioo.org'

                scm {
                    connection 'https://github.com/scenarioo/scenarioo.git'
                    developerConnection 'https://github.com/scenarioo/scenarioo.git'
                    url 'https://github.com/scenarioo/scenarioo.git'
                }

                licenses {
                    license {
                        name 'GNU GENERAL PUBLIC LICENSE'
                        url 'https://github.com/scenarioo/scenarioo/blob/develop/LICENSE.txt'
                    }
                }

                developers {
                    developer {
                        id 'scenarioo'
                        name 'Scenarioo'
                        email 'contact@scenarioo.org'
                    }
                }
            }
        }
    }
}
