version: 2
jobs:
  build:
    docker:
      # See https://circleci.com/docs/2.0/circleci-images/ ...
      - image: circleci/openjdk:8-jdk-browsers
      - image: docker.elastic.co/elasticsearch/elasticsearch:5.6.9
        environment:
          cluster.name: elasticsearch
          xpack.ml.enabled: false
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
    working_directory: ~/repo
    steps:
          - checkout
          - run:
              name: Clean & install
              command: |
                mkdir -p test-results
                ./gradlew clean build -x test --no-daemon
          - run:
              name: Unit tests
              command: ./gradlew test -x scenarioo-client:npm_test --continue --no-daemon
          - run:
              name: JS tests
              command: ./gradlew scenarioo-client:npm_test --no-daemon
              when: always
          - run:
              name: JS/TS lint
              command: ./gradlew scenarioo-client:runLinter --no-daemon
              when: always
          - run:
              name: E2E tests
              command: |
                export SCENARIOO_DATA=./scenarioo-docu-generation-example/build/scenarioDocuExample
                java -Xms800m -Xmx800m -jar scenarioo-server/build/libs/scenarioo-latest.war > test-results/scenarioo-server.log || echo "Scenarioo server died. Exit code: $? see https://circleci.com/blog/how-to-handle-java-oom-errors/" >> test-results/scenarioo-server.log &
                export PROTRACTOR_BASE_URL=http://localhost:8080/scenarioo
                export SCENARIOO_TARGET_DIRECTORY="../e2eScenariooDocu"
                export BRANCH="$CIRCLE_BRANCH"
                export BUILD_NAME="$CIRCLE_BUILD_NUM"
                sleep 30  # Give server some time because of comparisons
                export GRADLE_OPTS="-Xms300m -Xmx300m"
                ./gradlew scenarioo-client:runE2eCircleCi --no-daemon
          - run:
              name: Collect test results
              command: |
                mkdir -p test-results/javascript
                cp -pR scenarioo-client/TESTS* test-results/javascript || true
                cp -pR scenarioo-client/test-reports test-results/e2e || true
                cp -pR scenarioo-server/build/test-results/test test-results/server || true
                cp -pR scenarioo-validator/build/test-results/test test-results/validator || true
                cp -pR scenarioo-docu-generation-example/build/test-results/test test-results/docu || true
              when: always
          - store_test_results:
              path: test-results
          - store_artifacts:
              path: test-results
          - store_artifacts:
              path: e2eScenariooDocu

          # Build Docker image with build WAR and generated docu
          - setup_remote_docker:   # Creates a safe environment where docker commands are executed
              docker_layer_caching: true # Speed up builds
          # build and push Docker image
          - run:
              name: Create and push docker image
              command: |
                ENCODED_BRANCH=`echo $CIRCLE_BRANCH | tr / - | sed 's/#//g'`
                TAG="$ENCODED_BRANCH-BUILD_$CIRCLE_BUILD_NUM"
                DOCKER_BUILD_DIR="docker/scenarioo-ci"
                DOCKER_HUB_REPO="cgrossde/scenarioo-dev"
                echo "Copy WAR and scenarioo results of this build into docker image"
                cp scenarioo-server/build/libs/scenarioo-latest.war $DOCKER_BUILD_DIR/scenarioo.war
                cp -pR scenarioo-docu-generation-example/build/scenarioDocuExample $DOCKER_BUILD_DIR
                cp -pR e2eScenariooDocu/* $DOCKER_BUILD_DIR/scenarioDocuExample
                cd $DOCKER_BUILD_DIR
                echo "Build and push docker image to Docker Hub"
                docker build -t $DOCKER_HUB_REPO:$TAG .
                docker login -u $DOCKER_USER -p $DOCKER_PASS
                docker push cgrossde/scenarioo-dev:$TAG
                echo;echo;echo "CREATED AND PUSHED: $DOCKER_HUB_REPO:$TAG"
                echo "Run it with: docker run --rm --name scenarioo-citest -p 8080:8080 $DOCKER_HUB_REPO:$TAG"
                echo "Then visit: http://localhost:8080/scenarioo"


# Enable once we are ready to deploy it automatically on our server
#          - store_artifacts:
#              path: scenarioo-server/build/libs/scenarioo-latest.war
