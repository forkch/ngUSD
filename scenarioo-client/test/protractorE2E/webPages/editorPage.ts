'use strict';

import * as Utils from '../util/util';
import {by, element, ElementFinder} from 'protractor';

export default class EditorPage {

    private static saveButton: ElementFinder = element(by.id('save'));
    private static saveSketchSuccessfulMessage: ElementFinder = element(by.id('saveSketchSuccessfulMessage'));
    private static issueNameTextField: ElementFinder = element(by.id('issueName'));
    private static issueAuthorTextField: ElementFinder = element(by.id('issueAuthor'));
    private static issueDescriptionTextField: ElementFinder = element(by.id('issueDescription'));

    static async enterSketchInformation(sketchName, author) {
        await this.issueNameTextField.clear();
        await this.issueNameTextField.sendKeys(sketchName);
        await this.issueAuthorTextField.clear();
        await this.issueAuthorTextField.sendKeys(author);
        await this.issueDescriptionTextField.clear();
        return this.issueDescriptionTextField.sendKeys('this issue was generated by e2e tests');
    };

    static async clickSaveButton() {
        await expect(this.saveButton.isEnabled()).toBeTruthy();
        return this.saveButton.click();
    }

    static async assertSaveButtonIsDisabled() {
        return expect(this.saveButton.isEnabled()).toBe(false);
    }

    static async assertPageIsDisplayed() {
        return expect(this.saveButton.isDisplayed()).toBe(true);
    }

    static async assertAuthorFieldIsEmpty() {
        return expect(this.issueAuthorTextField.getText()).toBe('');
    }

    static async assertAuthorFieldIsSetTo(expectedAuthor) {
        return expect(this.issueAuthorTextField.getAttribute('value')).toBe(expectedAuthor);
    }

    static async assertSaveSketchSuccessfulMessageIsNotPresent() {
        return expect(this.saveSketchSuccessfulMessage.isPresent()).toBe(false);
    }

    static async assertSaveSketchSuccessfulMessageIsDisplayed() {
        await Utils.waitForElementVisible(this.saveSketchSuccessfulMessage);
        return expect(this.saveSketchSuccessfulMessage.isDisplayed()).toBe(true);
    }

}
